include:
  - project: "waldur/waldur-pipelines"
    file: "/templates/stages.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/check-merge-compatibility.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/release/publish.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/validate/docker-compose-trigger.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-docker-image.yaml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-dockerfile.yaml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/test/lint-md-files.yml"
  - project: "waldur/waldur-pipelines"
    file: "/templates/deploy/dev-env-update.yml"

before_script:
  - export

Run linters:
  image: registry.hpc.ut.ee/mirror/library/python:3.11-bullseye
  stage: test
  interruptible: true
  rules:
    # Skip tests if said so
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    # If tagged release
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
    # If event is related to a created merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
  script:
    - pip install pre-commit
    - pre-commit run --all

.Unit test runner:
  image: registry.hpc.ut.ee/mirror/$WALDUR_MASTERMIND_TEST_IMAGE
  stage: test
  interruptible: true
  rules:
    # Skip tests if said so
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_COMMIT_BRANCH == "develop"'
    # If tagged release
    - if: '$CI_COMMIT_TAG =~ /^\d+\.\d+\.\d+$/'
    # If event is related to a created merge request
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - src/**/*
        - pyproject.toml
        - poetry.lock
        - gitlab-ci-test/**/*
  services:
    - name: "registry.hpc.ut.ee/mirror/library/postgres:15-alpine"
      alias: postgres
      command:
        [
          "postgres",
          "-cfsync=off",
          "-cfull_page_writes=off",
          "-cmax_connections=1000",
          "-cshared_buffers=1GB",
          "-ceffective_cache_size=4GB",
          "-cwork_mem=32MB",
          "-cmaintenance_work_mem=32MB",
          "-ctemp_buffers=16MB",
          "-cwal_buffers=48MB",
        ]
  variables:
    POSTGRES_DB: test_waldur
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: waldur

Run unit tests:
  extends: .Unit test runner
  script:
    - |
      # Check merge compatibility only it is not a tagged release
      if [ "$CI_PIPELINE_SOURCE" == "merge_request_event" ]; then
        echo "[+] Add dummy user $GIT_USER_NAME ($GIT_USER_EMAIL)"
        git config user.name $GIT_USER_NAME
        git config user.email $GIT_USER_EMAIL
        echo "[+] Merging branches $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME and origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
        git merge --no-ff origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
      fi
    - gitlab-ci-test/waldur-test
    - coverage xml
    - coverage report
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
  parallel: 10

Run migration test:
  extends: .Unit test runner
  script:
    - gitlab-ci-test/waldur-test MIGRATIONS

Try building docker image:
  image:
    name: "gcr.io/kaniko-project/executor:debug"
    entrypoint: [""]
  stage: test
  interruptible: true
  rules:
    # Skip tests if said so
    - if: '$SKIP_TESTS == "true" || $SKIP_TESTS == "yes"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - Dockerfile
        - docker/**/*
        # TODO: drop after testing
        - .gitlab-ci.yml
  variables:
    DOCKER_REGISTRY: registry.hpc.ut.ee/mirror/
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}"
      --dockerfile "${CI_PROJECT_DIR}/Dockerfile"
      --build-arg DOCKER_REGISTRY=$DOCKER_REGISTRY
      --destination "waldur-mastermind:$CI_COMMIT_REF_SLUG"
      --no-push

Build docker image for tests:
  stage: build
  interruptible: true
  rules:
    # If scheduled pipeline for 'develop' branch is set up
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
  services:
    - name: "registry.hpc.ut.ee/iljatest/docker:24.0.6-dind"
      alias: docker
      command: ["--mtu=1400"]
  variables:
    DOCKER_REGISTRY: registry.hpc.ut.ee/mirror/
  script:
    - echo $CI_COMMIT_SHA > docker/rootfs/COMMIT
    - cat docker/rootfs/COMMIT
    - echo "$WALDUR_DOCKER_HUB_PASSWORD" | docker login -u "$WALDUR_DOCKER_HUB_USER" --password-stdin
    - docker build . -f gitlab-ci-test/Dockerfile -t $WALDUR_MASTERMIND_TEST_IMAGE --build-arg DOCKER_REGISTRY=$DOCKER_REGISTRY
    - docker push $WALDUR_MASTERMIND_TEST_IMAGE

Publish latest docker image:
  before_script:
    - echo '[+] Build and publish latest docker image'
    - echo $CI_COMMIT_SHA > docker/rootfs/COMMIT_SHA

Publish docker image with specific version:
  before_script:
    - echo "[+] Build and publish $CI_COMMIT_TAG docker image"
    - echo $CI_COMMIT_TAG > docker/rootfs/COMMIT_TAG
    - sed -i "s/version = \"0.0.0\"/version = \"$CI_COMMIT_TAG\"/" pyproject.toml

Lint docker image:
  extends: .Lint docker image template
  variables:
    IMAGE: opennode/waldur-mastermind:latest

Lint dockerfile:
  extends: .Lint dockerfile template
  variables:
    DOCKERFILE: Dockerfile
    HADOLINT_CONFIG: |
      ignored:
        - DL3003 # "WORKDIR" warning
        - DL3008 # "versions for `apt install`" warning
        - DL3015 # "--no-install-recommends" info
        - SC2094 # "read and write the same file in the same pipeline" info

Upload configuration guide:
  stage: deploy
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
  image: registry.hpc.ut.ee/mirror/$WALDUR_MASTERMIND_TEST_IMAGE
  variables:
    CONF_GUIDE_PATH: docs/admin-guide/mastermind-configuration/configuration-guide.md
    CLI_GUIDE_PATH: docs/admin-guide/mastermind-configuration/cli-guide.md
    FEATURES_GUIDE_PATH: docs/admin-guide/mastermind-configuration/features.md
    NOTIFICATIONS_GUIDE_PATH: docs/admin-guide/mastermind-configuration/notifications.md
    TEMPLATES_LIST_PATH: docs/admin-guide/mastermind-configuration/templates.md
    DEVELOPER_DOCS_PATH: docs/developer-guide
    DJANGO_SETTINGS_MODULE: waldur_core.server.doc_settings
  script:
    - poetry install
    - cd /tmp/
    - git clone "https://gitlab-ci-token:$GITLAB_TOKEN@$CI_SERVER_HOST/waldur/waldur-docs.git"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - cd waldur-docs
    - waldur print_settings > $CONF_GUIDE_PATH
    - waldur print_features_docs > $FEATURES_GUIDE_PATH
    - waldur print_notifications > $NOTIFICATIONS_GUIDE_PATH
    - waldur print_commands > $CLI_GUIDE_PATH
    - waldur print_events > $CI_PROJECT_DIR/docs/events.md
    - waldur print_templates > $TEMPLATES_LIST_PATH
    - waldur graph_models structure -I Customer,Project,OrganizationGroup,OrganizationGroupType,ProjectType,User -o $DEVELOPER_DOCS_PATH/core_structure.png
    - waldur graph_models permissions -I User,Role,UserRole,RolePermission -o $DEVELOPER_DOCS_PATH/core_permissions.png
    - waldur graph_models marketplace -I CategoryGroup,Category,CategoryColumn,Section,Attribute,AttributeOption,CategoryComponent,CategoryComponentUsage,Offering,OfferingComponent,Plan,PlanComponent,Resource,Order -o $DEVELOPER_DOCS_PATH/marketplace.png
    - cp -rv $CI_PROJECT_DIR/docs/* $DEVELOPER_DOCS_PATH
    - git add $CONF_GUIDE_PATH $FEATURES_GUIDE_PATH $CLI_GUIDE_PATH $DEVELOPER_DOCS_PATH $TEMPLATES_LIST_PATH $NOTIFICATIONS_GUIDE_PATH
    - git commit -m "Update configuration, CLI and developer guide" || exit 0
    - git branch new-configuration-guide
    - git push --set-upstream origin new-configuration-guide:master
  before_script: []

Upload HomePort enums:
  stage: deploy
  interruptible: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" && $CI_PIPELINE_SOURCE == "schedule"'
  image: registry.hpc.ut.ee/mirror/$WALDUR_MASTERMIND_TEST_IMAGE
  variables:
    PERMISSIONS_ENUM_PATH: src/permissions/enums.ts
    EVENTS_ENUM_PATH: src/EventsEnums.ts
    FEATURES_ENUM_PATH: src/FeaturesEnums.ts
    DJANGO_SETTINGS_MODULE: waldur_core.server.doc_settings
  script:
    - poetry install
    - cd src/waldur_core/permissions
    - python print_permission_enums.py > /tmp/permission_enums.ts
    - waldur print_events_enums > /tmp/events_enums.ts
    - waldur print_features_enums > /tmp/features_enums.ts
    - cd /tmp/
    - git clone "https://UpdateEnums:$HOMEPORT_ACCESS_TOKEN@$CI_SERVER_HOST/waldur/waldur-homeport.git"
    - git config --global user.name "$GITLAB_USER_NAME"
    - git config --global user.email "$GITLAB_USER_EMAIL"
    - cd waldur-homeport
    - git checkout develop
    - mv /tmp/permission_enums.ts $PERMISSIONS_ENUM_PATH
    - mv /tmp/events_enums.ts $EVENTS_ENUM_PATH
    - mv /tmp/features_enums.ts $FEATURES_ENUM_PATH
    - git add $PERMISSIONS_ENUM_PATH $EVENTS_ENUM_PATH $FEATURES_ENUM_PATH
    - git commit -m "Update enums" || exit 0
    - git branch new-enums
    - git push --set-upstream origin new-enums:develop
  before_script: []

Lint MD links:
  before_script:
    - touch docs/core_structure.png
    - touch docs/core_permissions.png
    - touch docs/marketplace.png
