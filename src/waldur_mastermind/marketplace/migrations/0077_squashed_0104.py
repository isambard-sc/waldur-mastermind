# Generated by Django 4.2.10 on 2024-06-14 09:21

import django.db.models.deletion
import django.utils.timezone
import model_utils.fields
import upload_validator
from django.conf import settings
from django.db import migrations, models

import waldur_core.core.fields
import waldur_core.core.validators

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# waldur_mastermind.marketplace.migrations.0080_fix_offering_state_without_plans
# waldur_mastermind.marketplace.migrations.0093_offering_endpoints


class States:
    DRAFT = 1
    ACTIVE = 2
    PAUSED = 3
    ARCHIVED = 4


def offering_has_plans(offering):
    return offering.plans.count() or (offering.parent and offering.parent.plans.count())


def fix_offering_state_without_plans(apps, schema_editor):
    Offering = apps.get_model("marketplace", "Offering")
    for offering in Offering.objects.filter(state=States.ACTIVE, shared=True):
        if offering_has_plans(offering):
            continue
        print(
            f"Switching state of offering with ID {offering.id} from active to paused."
        )
        offering.state = States.PAUSED
        offering.save()


def fill_offering_endpoint(apps, schema_editor):
    Offering = apps.get_model("marketplace", "Offering")
    OfferingAccessEndpoint = apps.get_model("marketplace", "OfferingAccessEndpoint")
    for offering in Offering.objects.exclude(access_url="").exclude(
        access_url__isnull=True
    ):
        OfferingAccessEndpoint.objects.create(
            offering=offering, name="Access URL", url=offering.access_url
        )


class Migration(migrations.Migration):
    replaces = [
        ("marketplace", "0077_resource_parent_data"),
        ("marketplace", "0078_alter_offering_parent"),
        ("marketplace", "0079_componentusage_modified_by"),
        ("marketplace", "0080_fix_offering_state_without_plans"),
        ("marketplace", "0081_robotaccount"),
        ("marketplace", "0082_offeringuser_propagation_date"),
        ("marketplace", "0083_offeringuser_backend_metadata"),
        ("marketplace", "0084_resource_end_date_requested_by"),
        ("marketplace", "0085_orderitem_termination_comment"),
        ("marketplace", "0086_backend_metadata"),
        ("marketplace", "0087_robotaccount_backend_id"),
        ("marketplace", "0088_usage_decimal"),
        ("marketplace", "0089_offeringusergroup"),
        ("marketplace", "0090_alter_resource_offering"),
        ("marketplace", "0091_alter_offering_access_url"),
        ("marketplace", "0092_resource_requested_downscaling"),
        ("marketplace", "0093_offering_endpoints"),
        ("marketplace", "0094_resource_error_message"),
        ("marketplace", "0095_offeringcomponent_uuid"),
        ("marketplace", "0096_translations"),
        ("marketplace", "0097_category_group"),
        ("marketplace", "0098_robotaccount_responsible_user"),
        ("marketplace", "0099_offering_getting_started"),
        ("marketplace", "0100_alter_resource_unique_together"),
        ("marketplace", "0101_categorycomponent_uuid"),
        ("marketplace", "0102_translations"),
        ("marketplace", "0103_offering_integration_guide"),
        ("marketplace", "0104_translations"),
    ]

    dependencies = [
        ("marketplace", "0001_squashed_0076"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("structure", "0039_project_end_date_requested_by"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name="offering",
            name="parent",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="children",
                to="marketplace.offering",
            ),
        ),
        migrations.AddField(
            model_name="componentusage",
            name="modified_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RunPython(fix_offering_state_without_plans),
        migrations.AddField(
            model_name="offeringuser",
            name="propagation_date",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="resource",
            name="end_date_requested_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="orderitem",
            name="termination_comment",
            field=models.CharField(blank=True, max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="offeringuser",
            name="backend_metadata",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.CreateModel(
            name="RobotAccount",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("type", models.CharField(max_length=5)),
                ("username", models.CharField(blank=True, max_length=32)),
                ("keys", models.JSONField(blank=True, default=list)),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="marketplace.resource",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(blank=True, to=settings.AUTH_USER_MODEL),
                ),
                ("backend_metadata", models.JSONField(blank=True, default=dict)),
                ("backend_id", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "unique_together": {("resource", "type")},
            },
        ),
        migrations.AlterField(
            model_name="componentquota",
            name="limit",
            field=models.DecimalField(decimal_places=2, default=-1, max_digits=20),
        ),
        migrations.AlterField(
            model_name="componentquota",
            name="usage",
            field=models.DecimalField(decimal_places=2, default=0, max_digits=20),
        ),
        migrations.AlterField(
            model_name="componentusage",
            name="usage",
            field=models.DecimalField(decimal_places=2, default=0, max_digits=20),
        ),
        migrations.CreateModel(
            name="OfferingUserGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("backend_metadata", models.JSONField(blank=True, default=dict)),
                (
                    "offering",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="marketplace.offering",
                    ),
                ),
                (
                    "projects",
                    models.ManyToManyField(blank=True, to="structure.project"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AlterField(
            model_name="resource",
            name="offering",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="marketplace.offering",
            ),
        ),
        migrations.AlterField(
            model_name="offering",
            name="access_url",
            field=waldur_core.core.fields.BackendURLField(
                blank=True, help_text="URL for accessing management console.", null=True
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="requested_downscaling",
            field=models.BooleanField(default=False),
        ),
        migrations.CreateModel(
            name="OfferingAccessEndpoint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("url", waldur_core.core.fields.BackendURLField()),
                (
                    "offering",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endpoints",
                        to="marketplace.offering",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="ResourceAccessEndpoint",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("url", waldur_core.core.fields.BackendURLField()),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="endpoints",
                        to="marketplace.resource",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(fill_offering_endpoint),
        migrations.AddField(
            model_name="resource",
            name="error_message",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="resource",
            name="error_traceback",
            field=models.TextField(blank=True),
        ),
        migrations.RemoveField(
            model_name="offering",
            name="access_url",
        ),
        migrations.AddField(
            model_name="offeringcomponent",
            name="uuid",
            field=waldur_core.core.fields.UUIDField(),
        ),
        migrations.RunSQL(
            sql=[
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_da;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_de;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_es;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_fr;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_it;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_lt;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_lv;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_nb;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_ru;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS description_sv;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_da;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_de;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_es;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_fr;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_it;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_lt;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_lv;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_nb;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_ru;",
                "ALTER TABLE marketplace_category DROP COLUMN IF EXISTS title_sv;",
            ],
        ),
        migrations.AddField(
            model_name="category",
            name="description_de",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_es",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_fr",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_it",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_lt",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_lv",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_nb",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_ru",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_sv",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_da",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_de",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_es",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_fr",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_it",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_lt",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_lv",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_nb",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_ru",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_sv",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.CreateModel(
            name="CategoryGroup",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                ("title", models.CharField(max_length=255)),
                ("title_en", models.CharField(max_length=255, null=True)),
                ("title_et", models.CharField(max_length=255, null=True)),
                ("title_lt", models.CharField(max_length=255, null=True)),
                ("title_lv", models.CharField(max_length=255, null=True)),
                ("title_ru", models.CharField(max_length=255, null=True)),
                ("title_it", models.CharField(max_length=255, null=True)),
                ("title_de", models.CharField(max_length=255, null=True)),
                ("title_da", models.CharField(max_length=255, null=True)),
                ("title_sv", models.CharField(max_length=255, null=True)),
                ("title_es", models.CharField(max_length=255, null=True)),
                ("title_fr", models.CharField(max_length=255, null=True)),
                ("title_nb", models.CharField(max_length=255, null=True)),
                (
                    "icon",
                    models.FileField(
                        blank=True,
                        null=True,
                        upload_to="marketplace_category_group_icons",
                        validators=[
                            upload_validator.FileTypeValidator(
                                allowed_types=[
                                    "image/png",
                                    "image/gif",
                                    "image/jpeg",
                                    "image/svg",
                                    "image/svg+xml",
                                    "image/x-icon",
                                ]
                            )
                        ],
                    ),
                ),
                ("description", models.TextField(blank=True)),
                ("description_en", models.TextField(blank=True, null=True)),
                ("description_et", models.TextField(blank=True, null=True)),
                ("description_lt", models.TextField(blank=True, null=True)),
                ("description_lv", models.TextField(blank=True, null=True)),
                ("description_ru", models.TextField(blank=True, null=True)),
                ("description_it", models.TextField(blank=True, null=True)),
                ("description_de", models.TextField(blank=True, null=True)),
                ("description_da", models.TextField(blank=True, null=True)),
                ("description_sv", models.TextField(blank=True, null=True)),
                ("description_es", models.TextField(blank=True, null=True)),
                ("description_fr", models.TextField(blank=True, null=True)),
                ("description_nb", models.TextField(blank=True, null=True)),
                ("description_ar", models.TextField(blank=True, null=True)),
                ("title_ar", models.CharField(max_length=255, null=True)),
                ("description_cs", models.TextField(blank=True, null=True)),
                ("title_cs", models.CharField(max_length=255, null=True)),
            ],
            options={
                "verbose_name": "Category group",
                "verbose_name_plural": "Category groups",
                "ordering": ("title",),
            },
        ),
        migrations.AddField(
            model_name="category",
            name="group",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="marketplace.categorygroup",
            ),
        ),
        migrations.AddField(
            model_name="robotaccount",
            name="responsible_user",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="offering",
            name="getting_started",
            field=models.TextField(blank=True),
        ),
        migrations.AlterUniqueTogether(
            name="resource",
            unique_together={("content_type", "object_id")},
        ),
        migrations.AddField(
            model_name="category",
            name="description_da",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="categorycomponent",
            name="uuid",
            field=waldur_core.core.fields.UUIDField(),
        ),
        migrations.AddField(
            model_name="category",
            name="description_ar",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_ar",
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AddField(
            model_name="offering",
            name="integration_guide",
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name="category",
            name="description_cs",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="category",
            name="title_cs",
            field=models.CharField(max_length=255, null=True),
        ),
    ]
