# Generated by Django 4.2.10 on 2024-06-14 10:43

import logging
from decimal import Decimal

import django.core.validators
import django.utils.timezone
import django_fsm
import model_utils.fields
from django.conf import settings
from django.conf import settings as django_settings
from django.db import migrations, models
from django.db.models import Count, F

import waldur_core.core.fields
import waldur_core.core.validators
from waldur_mastermind.marketplace_slurm import registrators as slurm_registrators

logger = logging.getLogger(__name__)


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# waldur_mastermind.marketplace.migrations.0113_init_order_resource
# waldur_mastermind.marketplace.migrations.0115_consumer_reviewed_by
# waldur_mastermind.marketplace.migrations.0119_clean_componentusage
# waldur_mastermind.marketplace.migrations.0121_clean_invalid_usage
# waldur_mastermind.marketplace.migrations.0122_add_missing_plan_periods
# waldur_mastermind.marketplace.migrations.0123_drop_druplicate_usage
# waldur_mastermind.marketplace.migrations.0124_update_resource_for_orders
# waldur_mastermind.marketplace.migrations.0130_fix_limits_of_slurm_offering_components


def init_order_resource(apps, schema_editor):
    Order = apps.get_model("marketplace", "Order")
    Resource = apps.get_model("marketplace", "Resource")
    for order in Order.objects.filter(resource__isnull=True):
        name = order.attributes.get("name") or "resource"
        resource = Resource.objects.create(
            project=order.project,
            offering=order.offering,
            plan=order.plan,
            limits=order.limits,
            attributes=order.attributes,
            name=name[:150],
        )
        order.resource = resource
        order.save(update_fields=["resource"])


class OrderStates:
    PENDING_CONSUMER = 1
    PENDING_PROVIDER = 7
    EXECUTING = 2
    DONE = 3
    ERRED = 4
    CANCELED = 5
    REJECTED = 6


def init_consumer_reviewed_by(apps, schema_editor):
    Order = apps.get_model("marketplace", "Order")
    Order.objects.filter(
        consumer_reviewed_by__isnull=True,
        consumer_reviewed_at__isnull=True,
        state__in=(
            OrderStates.PENDING_PROVIDER,
            OrderStates.EXECUTING,
            OrderStates.DONE,
        ),
    ).update(
        consumer_reviewed_by=models.F("created_by"),
        consumer_reviewed_at=models.F("created"),
    )


def clean_componentusage_119(apps, schema_editor):
    ComponentUsage = apps.get_model("marketplace", "ComponentUsage")
    resource_ids: list[str] = (
        ComponentUsage.objects.filter(plan_period=None)
        .values("resource_id", "component_id", "billing_period")
        .annotate(count=Count("id"))
        .filter(count__gt=1)
        .values_list("resource_id", flat=True)
        .distinct()
    )
    for resource_id in resource_ids:
        pairs: list[dict] = (
            ComponentUsage.objects.filter(plan_period=None, resource_id=resource_id)
            .values("component_id", "billing_period")
            .annotate(count=Count("id"))
            .filter(count__gt=1)
            .values("component_id", "billing_period")
        )
        for pair in pairs:
            filters = dict(
                plan_period=None,
                resource_id=resource_id,
                component_id=pair["component_id"],
                billing_period=pair["billing_period"],
            )
            max_usage = (
                ComponentUsage.objects.filter(**filters).order_by("usage").last()
            )
            ComponentUsage.objects.filter(**filters).exclude(id=max_usage.id).delete()


PLUGIN_NAME = "Waldur.RemoteOffering"


def clean_componentusage_121(apps, schema_editor):
    ComponentUsage = apps.get_model("marketplace", "ComponentUsage")
    ComponentUsage.objects.filter(
        resource__offering__type=PLUGIN_NAME, resource__backend_id=""
    ).delete()
    ComponentUsage.objects.filter(
        resource__offering__type=PLUGIN_NAME, date__lt=F("resource__created")
    ).delete()


class ResourceStates:
    CREATING = 1
    OK = 2
    ERRED = 3
    UPDATING = 4
    TERMINATING = 5
    TERMINATED = 6


def add_missing_plan_periods(apps, schema_editor):
    Resource = apps.get_model("marketplace", "Resource")
    ResourcePlanPeriod = apps.get_model("marketplace", "ResourcePlanPeriod")
    ComponentUsage = apps.get_model("marketplace", "ComponentUsage")
    for resource in Resource.objects.filter(
        state__in=(ResourceStates.OK, ResourceStates.UPDATING)
    ).exclude(plan=None):
        if ResourcePlanPeriod.objects.filter(resource=resource, end=None).exists():
            continue
        plan_period = ResourcePlanPeriod.objects.create(
            resource=resource,
            plan=resource.plan,
            start=resource.created,
            end=None,
        )
        ComponentUsage.objects.filter(resource=resource, plan_period=None).update(
            plan_period=plan_period
        )


def drop_druplicate_usage(apps, schema_editor):
    ComponentUsage = apps.get_model("marketplace", "ComponentUsage")
    ComponentUsage.objects.filter(plan_period=None).exclude(
        resource__plan=None
    ).delete()


class OrderTypes:
    CREATE = 1
    UPDATE = 2
    TERMINATE = 3


def update_resource_for_orders(apps, schema_editor):
    Resource = apps.get_model("marketplace", "Resource")
    Order = apps.get_model("marketplace", "Order")

    creating_resources = Resource.objects.filter(state=ResourceStates.CREATING)

    for resource in creating_resources:
        creation_order = Order.objects.filter(
            resource=resource, type=OrderTypes.CREATE
        ).first()
        if not creation_order or creation_order.state != OrderStates.ERRED:
            continue

        if resource.backend_id in [None, ""]:
            resource.state = ResourceStates.TERMINATED
        else:
            resource.state = ResourceStates.ERRED

        resource.save(update_fields=["state"])


class LimitPeriods:
    MONTH = "month"
    ANNUAL = "annual"
    TOTAL = "total"

    CHOICES = (
        (
            MONTH,
            "Maximum monthly - every month service provider "
            "can report up to the amount requested by user.",
        ),
        (
            ANNUAL,
            "Maximum annually - every year service provider "
            "can report up to the amount requested by user.",
        ),
        (
            TOTAL,
            "Maximum total - SP can report up to the requested "
            "amount over the whole active state of resource.",
        ),
    )


def fix_limits_of_slurm_offering_components(apps, schema_editor):
    Offering = apps.get_model("marketplace", "Offering")
    OfferingComponent = apps.get_model("marketplace", "OfferingComponent")
    TOTAL = LimitPeriods.TOTAL
    default_limits = django_settings.WALDUR_SLURM["DEFAULT_LIMITS"]
    offering_ids = Offering.objects.filter(
        type="SlurmInvoices.SlurmPackage"
    ).values_list("id", flat=True)
    components = OfferingComponent.objects.filter(offering_id__in=offering_ids)
    for component in components:
        if component.type == "cpu":
            old_limit_amount = component.limit_amount
            old_limit_period = component.limit_period
            component.limit_amount = (
                slurm_registrators.SlurmRegistrator.convert_quantity(
                    default_limits["CPU"], "cpu"
                )
            )
            component.limit_period = TOTAL
            component.save(update_fields=["limit_amount", "limit_period"])
            logger.info(
                f"Updated limit for cpu component old values: {old_limit_amount} {old_limit_period} new values: {component.limit_amount} {component.limit_period} for offering - {component.offering.name}."
            )

        elif component.type == "gpu":
            old_limit_amount = component.limit_amount
            old_limit_period = component.limit_period
            component.limit_amount = (
                slurm_registrators.SlurmRegistrator.convert_quantity(
                    default_limits["GPU"], "gpu"
                )
            )
            component.limit_period = TOTAL
            component.save(update_fields=["limit_amount", "limit_period"])
            logger.info(
                f"Updated limit for gpu component old values: {old_limit_amount} {old_limit_period} new values: {component.limit_amount} {component.limit_period} for offering - {component.offering.name}."
            )

        elif component.type == "ram":
            old_limit_amount = component.limit_amount
            old_limit_period = component.limit_period
            component.limit_amount = (
                slurm_registrators.SlurmRegistrator.convert_quantity(
                    default_limits["RAM"], "ram"
                )
            )
            component.limit_period = TOTAL
            component.save(update_fields=["limit_amount", "limit_period"])
            logger.info(
                f"Updated limit for ram component old values: {old_limit_amount} {old_limit_period} new values: {component.limit_amount} {component.limit_period} for offering - {component.offering.name}."
            )


class Migration(migrations.Migration):
    replaces = [
        ("marketplace", "0108_rename_orderitem_order"),
        ("marketplace", "0109_alter_order_options"),
        ("marketplace", "0110_provider_reviewed_by"),
        ("marketplace", "0111_consumer_reviewed_by"),
        ("marketplace", "0112_delete_offeringpermission"),
        ("marketplace", "0113_init_order_resource"),
        ("marketplace", "0114_alter_order_resource"),
        ("marketplace", "0115_consumer_reviewed_by"),
        ("marketplace", "0116_plancomponent_future_price"),
        ("marketplace", "0117_offering_resource_options_alter_offering_options"),
        ("marketplace", "0118_resource_options"),
        ("marketplace", "0119_clean_componentusage"),
        ("marketplace", "0120_componentusage_unique_together"),
        ("marketplace", "0121_clean_invalid_usage"),
        ("marketplace", "0122_add_missing_plan_periods"),
        ("marketplace", "0123_drop_druplicate_usage"),
        ("marketplace", "0124_update_resource_for_orders"),
        ("marketplace", "0125_offeringuserrole_resourceuser"),
        ("marketplace", "0126_offering_backend_metadata"),
        ("marketplace", "0127_integrationstatus"),
        ("marketplace", "0128_alter_plan_unit_price"),
        ("marketplace", "0129_rename_divisions_to_organization_groups"),
        ("marketplace", "0130_fix_limits_of_slurm_offering_components"),
        ("marketplace", "0131_delete_aggregateresourcecount"),
    ]

    dependencies = [
        ("structure", "0040_useragreement_uuid"),
        ("permissions", "0002_import_data"),
        ("marketplace", "0107_merge_order_item_with_order_step3"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RenameModel(
            old_name="OrderItem",
            new_name="Order",
        ),
        migrations.AlterModelOptions(
            name="order",
            options={"ordering": ("created",), "verbose_name": "Order"},
        ),
        migrations.RenameField(
            model_name="order",
            old_name="reviewed_at",
            new_name="provider_reviewed_at",
        ),
        migrations.RenameField(
            model_name="order",
            old_name="reviewed_by",
            new_name="provider_reviewed_by",
        ),
        migrations.RenameField(
            model_name="order",
            old_name="approved_at",
            new_name="consumer_reviewed_at",
        ),
        migrations.RenameField(
            model_name="order",
            old_name="approved_by",
            new_name="consumer_reviewed_by",
        ),
        migrations.DeleteModel(
            name="OfferingPermission",
        ),
        migrations.RunPython(init_order_resource),
        migrations.AlterField(
            model_name="order",
            name="resource",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to="marketplace.resource"
            ),
        ),
        migrations.RunPython(init_consumer_reviewed_by),
        migrations.AddField(
            model_name="plancomponent",
            name="future_price",
            field=models.DecimalField(
                decimal_places=10,
                max_digits=22,
                null=True,
                validators=[django.core.validators.MinValueValidator(Decimal("0"))],
                verbose_name="Price per unit for future month.",
            ),
        ),
        migrations.AddField(
            model_name="offering",
            name="resource_options",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Fields describing resource report form.",
            ),
        ),
        migrations.AlterField(
            model_name="offering",
            name="options",
            field=models.JSONField(
                blank=True,
                default=dict,
                help_text="Fields describing resource provision form.",
            ),
        ),
        migrations.AddField(
            model_name="resource",
            name="options",
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.RunPython(clean_componentusage_119),
        migrations.AlterUniqueTogether(
            name="componentusage",
            unique_together=set(),
        ),
        migrations.AddConstraint(
            model_name="componentusage",
            constraint=models.UniqueConstraint(
                fields=("resource", "component", "plan_period", "billing_period"),
                name="unique_with_optional",
            ),
        ),
        migrations.AddConstraint(
            model_name="componentusage",
            constraint=models.UniqueConstraint(
                condition=models.Q(("plan_period", None)),
                fields=("resource", "component", "billing_period"),
                name="unique_without_optional",
            ),
        ),
        migrations.RunPython(clean_componentusage_121),
        migrations.RunPython(add_missing_plan_periods),
        migrations.RunPython(drop_druplicate_usage),
        migrations.RunPython(update_resource_for_orders),
        migrations.CreateModel(
            name="OfferingUserRole",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=150,
                        validators=[waldur_core.core.validators.validate_name],
                        verbose_name="name",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                (
                    "offering",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="roles",
                        to="marketplace.offering",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="ResourceUser",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created",
                    model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created",
                    ),
                ),
                (
                    "modified",
                    model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="modified",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="users",
                        to="marketplace.resource",
                    ),
                ),
                (
                    "role",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="marketplace.offeringuserrole",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["created"],
            },
        ),
        migrations.AddField(
            model_name="offering",
            name="backend_metadata",
            field=models.JSONField(blank=True, default=dict),
        ),
        migrations.CreateModel(
            name="IntegrationStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("uuid", waldur_core.core.fields.UUIDField()),
                (
                    "agent_type",
                    models.CharField(
                        choices=[
                            (1, "Order processing"),
                            (2, "Usage reporting"),
                            (3, "Glauth sync"),
                        ],
                        default=1,
                        max_length=15,
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMIntegerField(
                        choices=[(1, "Unknown"), (2, "Active"), (3, "Disconnected")],
                        default=1,
                    ),
                ),
                (
                    "last_request_timestamp",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        null=True,
                        verbose_name="time of latest backend request",
                    ),
                ),
                (
                    "offering",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="marketplace.offering",
                    ),
                ),
            ],
            options={
                "unique_together": {("offering", "agent_type")},
            },
        ),
        migrations.AlterField(
            model_name="plan",
            name="unit_price",
            field=models.DecimalField(
                decimal_places=10,
                default=0,
                max_digits=22,
                validators=[django.core.validators.MinValueValidator(Decimal("0"))],
            ),
        ),
        migrations.RenameField(
            model_name="offering",
            old_name="divisions",
            new_name="organization_groups",
        ),
        migrations.RenameField(
            model_name="plan",
            old_name="divisions",
            new_name="organization_groups",
        ),
        migrations.RunPython(fix_limits_of_slurm_offering_components),
        migrations.DeleteModel(
            name="AggregateResourceCount",
        ),
    ]
